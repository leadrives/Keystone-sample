# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  content: String
  author: User
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  content: StringFilter
  author: UserWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  content: OrderDirection
}

input PostUpdateInput {
  title: String
  content: String
  author: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: String
  author: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Project {
  id: ID!
  slug: String
  heroImage: FileFieldOutput
  mainHeading: String
  subHeading: String
  agents(where: AgentWhereInput! = {}, orderBy: [AgentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AgentWhereUniqueInput): [Agent!]
  agentsCount(where: AgentWhereInput! = {}): Int
  agentCount: Int
  galleryMainHeading: String
  galleryTitle: String
  galleryParagraph: String
  galleryImages(where: GalleryImageWhereInput! = {}, orderBy: [GalleryImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryImageWhereUniqueInput): [GalleryImage!]
  galleryImagesCount(where: GalleryImageWhereInput! = {}): Int
  amenitiesList: String
  paymentPlanHeading: String
  paymentPlanImage: FileFieldOutput
  paymentPlanTitle: String
  paymentPlanNumber: String
  paymentPlanSuffix: String
  paymentPlanDescription: String
  paymentPlanBullets: String
  locationHeading: String
  locationSubheading: String
  locationTitle: String
  locationDescription: String
  locationDescription2: String
  locationBullets: String
  locationMapImage: FileFieldOutput
  developerTitle: String
  developerParagraph1: String
  developerParagraph2: String
  developerRedParagraph: String
  developerRedBoldText: String
  developerImage1: FileFieldOutput
  developerImage2: FileFieldOutput
  contactHeading: String
  contactProfilePic: FileFieldOutput
  contactProfileName: String
  contactProfileDescription: String
  contactBullets: String
  contactMap: FileFieldOutput
  faq(where: FAQWhereInput! = {}, orderBy: [FAQOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQWhereUniqueInput): [FAQ!]
  faqCount(where: FAQWhereInput! = {}): Int
  parallaxImage: FileFieldOutput
  panoramicImage: FileFieldOutput
  amenitiesSectionHeading: String
  amenitiesCards(where: AmenityCardWhereInput! = {}, orderBy: [AmenityCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AmenityCardWhereUniqueInput): [AmenityCard!]
  amenitiesCardsCount(where: AmenityCardWhereInput! = {}): Int
  amenityFilters(where: AmenityFilterWhereInput! = {}, orderBy: [AmenityFilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AmenityFilterWhereUniqueInput): [AmenityFilter!]
  amenityFiltersCount(where: AmenityFilterWhereInput! = {}): Int
  units(where: UnitWhereInput! = {}, orderBy: [UnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UnitWhereUniqueInput): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
  unitFilters(where: UnitFilterWhereInput! = {}, orderBy: [UnitFilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UnitFilterWhereUniqueInput): [UnitFilter!]
  unitFiltersCount(where: UnitFilterWhereInput! = {}): Int
  materials(where: MaterialCardWhereInput! = {}, orderBy: [MaterialCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialCardWhereUniqueInput): [MaterialCard!]
  materialsCount(where: MaterialCardWhereInput! = {}): Int
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input ProjectWhereUniqueInput {
  id: ID
  slug: String
}

input ProjectWhereInput {
  AND: [ProjectWhereInput!]
  OR: [ProjectWhereInput!]
  NOT: [ProjectWhereInput!]
  id: IDFilter
  slug: StringFilter
  mainHeading: StringFilter
  subHeading: StringFilter
  agents: AgentManyRelationFilter
  agentCount: IntNullableFilter
  galleryMainHeading: StringFilter
  galleryTitle: StringFilter
  galleryParagraph: StringFilter
  galleryImages: GalleryImageManyRelationFilter
  amenitiesList: StringFilter
  paymentPlanHeading: StringFilter
  paymentPlanTitle: StringFilter
  paymentPlanNumber: StringFilter
  paymentPlanSuffix: StringFilter
  paymentPlanDescription: StringFilter
  paymentPlanBullets: StringFilter
  locationHeading: StringFilter
  locationSubheading: StringFilter
  locationTitle: StringFilter
  locationDescription: StringFilter
  locationDescription2: StringFilter
  locationBullets: StringFilter
  developerTitle: StringFilter
  developerParagraph1: StringFilter
  developerParagraph2: StringFilter
  developerRedParagraph: StringFilter
  developerRedBoldText: StringFilter
  contactHeading: StringFilter
  contactProfileName: StringFilter
  contactProfileDescription: StringFilter
  contactBullets: StringFilter
  faq: FAQManyRelationFilter
  amenitiesSectionHeading: StringFilter
  amenitiesCards: AmenityCardManyRelationFilter
  amenityFilters: AmenityFilterManyRelationFilter
  units: UnitManyRelationFilter
  unitFilters: UnitFilterManyRelationFilter
  materials: MaterialCardManyRelationFilter
}

input AgentManyRelationFilter {
  every: AgentWhereInput
  some: AgentWhereInput
  none: AgentWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input GalleryImageManyRelationFilter {
  every: GalleryImageWhereInput
  some: GalleryImageWhereInput
  none: GalleryImageWhereInput
}

input FAQManyRelationFilter {
  every: FAQWhereInput
  some: FAQWhereInput
  none: FAQWhereInput
}

input AmenityCardManyRelationFilter {
  every: AmenityCardWhereInput
  some: AmenityCardWhereInput
  none: AmenityCardWhereInput
}

input AmenityFilterManyRelationFilter {
  every: AmenityFilterWhereInput
  some: AmenityFilterWhereInput
  none: AmenityFilterWhereInput
}

input UnitManyRelationFilter {
  every: UnitWhereInput
  some: UnitWhereInput
  none: UnitWhereInput
}

input UnitFilterManyRelationFilter {
  every: UnitFilterWhereInput
  some: UnitFilterWhereInput
  none: UnitFilterWhereInput
}

input MaterialCardManyRelationFilter {
  every: MaterialCardWhereInput
  some: MaterialCardWhereInput
  none: MaterialCardWhereInput
}

input ProjectOrderByInput {
  id: OrderDirection
  slug: OrderDirection
  mainHeading: OrderDirection
  subHeading: OrderDirection
  agentCount: OrderDirection
  galleryMainHeading: OrderDirection
  galleryTitle: OrderDirection
  galleryParagraph: OrderDirection
  amenitiesList: OrderDirection
  paymentPlanHeading: OrderDirection
  paymentPlanTitle: OrderDirection
  paymentPlanNumber: OrderDirection
  paymentPlanSuffix: OrderDirection
  paymentPlanDescription: OrderDirection
  paymentPlanBullets: OrderDirection
  locationHeading: OrderDirection
  locationSubheading: OrderDirection
  locationTitle: OrderDirection
  locationDescription: OrderDirection
  locationDescription2: OrderDirection
  locationBullets: OrderDirection
  developerTitle: OrderDirection
  developerParagraph1: OrderDirection
  developerParagraph2: OrderDirection
  developerRedParagraph: OrderDirection
  developerRedBoldText: OrderDirection
  contactHeading: OrderDirection
  contactProfileName: OrderDirection
  contactProfileDescription: OrderDirection
  contactBullets: OrderDirection
  amenitiesSectionHeading: OrderDirection
}

input ProjectUpdateInput {
  slug: String
  heroImage: FileFieldInput
  mainHeading: String
  subHeading: String
  agents: AgentRelateToManyForUpdateInput
  agentCount: Int
  galleryMainHeading: String
  galleryTitle: String
  galleryParagraph: String
  galleryImages: GalleryImageRelateToManyForUpdateInput
  amenitiesList: String
  paymentPlanHeading: String
  paymentPlanImage: FileFieldInput
  paymentPlanTitle: String
  paymentPlanNumber: String
  paymentPlanSuffix: String
  paymentPlanDescription: String
  paymentPlanBullets: String
  locationHeading: String
  locationSubheading: String
  locationTitle: String
  locationDescription: String
  locationDescription2: String
  locationBullets: String
  locationMapImage: FileFieldInput
  developerTitle: String
  developerParagraph1: String
  developerParagraph2: String
  developerRedParagraph: String
  developerRedBoldText: String
  developerImage1: FileFieldInput
  developerImage2: FileFieldInput
  contactHeading: String
  contactProfilePic: FileFieldInput
  contactProfileName: String
  contactProfileDescription: String
  contactBullets: String
  contactMap: FileFieldInput
  faq: FAQRelateToManyForUpdateInput
  parallaxImage: FileFieldInput
  panoramicImage: FileFieldInput
  amenitiesSectionHeading: String
  amenitiesCards: AmenityCardRelateToManyForUpdateInput
  amenityFilters: AmenityFilterRelateToManyForUpdateInput
  units: UnitRelateToManyForUpdateInput
  unitFilters: UnitFilterRelateToManyForUpdateInput
  materials: MaterialCardRelateToManyForUpdateInput
}

input FileFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input AgentRelateToManyForUpdateInput {
  disconnect: [AgentWhereUniqueInput!]
  set: [AgentWhereUniqueInput!]
  create: [AgentCreateInput!]
  connect: [AgentWhereUniqueInput!]
}

input GalleryImageRelateToManyForUpdateInput {
  disconnect: [GalleryImageWhereUniqueInput!]
  set: [GalleryImageWhereUniqueInput!]
  create: [GalleryImageCreateInput!]
  connect: [GalleryImageWhereUniqueInput!]
}

input FAQRelateToManyForUpdateInput {
  disconnect: [FAQWhereUniqueInput!]
  set: [FAQWhereUniqueInput!]
  create: [FAQCreateInput!]
  connect: [FAQWhereUniqueInput!]
}

input AmenityCardRelateToManyForUpdateInput {
  disconnect: [AmenityCardWhereUniqueInput!]
  set: [AmenityCardWhereUniqueInput!]
  create: [AmenityCardCreateInput!]
  connect: [AmenityCardWhereUniqueInput!]
}

input AmenityFilterRelateToManyForUpdateInput {
  disconnect: [AmenityFilterWhereUniqueInput!]
  set: [AmenityFilterWhereUniqueInput!]
  create: [AmenityFilterCreateInput!]
  connect: [AmenityFilterWhereUniqueInput!]
}

input UnitRelateToManyForUpdateInput {
  disconnect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitFilterRelateToManyForUpdateInput {
  disconnect: [UnitFilterWhereUniqueInput!]
  set: [UnitFilterWhereUniqueInput!]
  create: [UnitFilterCreateInput!]
  connect: [UnitFilterWhereUniqueInput!]
}

input MaterialCardRelateToManyForUpdateInput {
  disconnect: [MaterialCardWhereUniqueInput!]
  set: [MaterialCardWhereUniqueInput!]
  create: [MaterialCardCreateInput!]
  connect: [MaterialCardWhereUniqueInput!]
}

input ProjectUpdateArgs {
  where: ProjectWhereUniqueInput!
  data: ProjectUpdateInput!
}

input ProjectCreateInput {
  slug: String
  heroImage: FileFieldInput
  mainHeading: String
  subHeading: String
  agents: AgentRelateToManyForCreateInput
  agentCount: Int
  galleryMainHeading: String
  galleryTitle: String
  galleryParagraph: String
  galleryImages: GalleryImageRelateToManyForCreateInput
  amenitiesList: String
  paymentPlanHeading: String
  paymentPlanImage: FileFieldInput
  paymentPlanTitle: String
  paymentPlanNumber: String
  paymentPlanSuffix: String
  paymentPlanDescription: String
  paymentPlanBullets: String
  locationHeading: String
  locationSubheading: String
  locationTitle: String
  locationDescription: String
  locationDescription2: String
  locationBullets: String
  locationMapImage: FileFieldInput
  developerTitle: String
  developerParagraph1: String
  developerParagraph2: String
  developerRedParagraph: String
  developerRedBoldText: String
  developerImage1: FileFieldInput
  developerImage2: FileFieldInput
  contactHeading: String
  contactProfilePic: FileFieldInput
  contactProfileName: String
  contactProfileDescription: String
  contactBullets: String
  contactMap: FileFieldInput
  faq: FAQRelateToManyForCreateInput
  parallaxImage: FileFieldInput
  panoramicImage: FileFieldInput
  amenitiesSectionHeading: String
  amenitiesCards: AmenityCardRelateToManyForCreateInput
  amenityFilters: AmenityFilterRelateToManyForCreateInput
  units: UnitRelateToManyForCreateInput
  unitFilters: UnitFilterRelateToManyForCreateInput
  materials: MaterialCardRelateToManyForCreateInput
}

input AgentRelateToManyForCreateInput {
  create: [AgentCreateInput!]
  connect: [AgentWhereUniqueInput!]
}

input GalleryImageRelateToManyForCreateInput {
  create: [GalleryImageCreateInput!]
  connect: [GalleryImageWhereUniqueInput!]
}

input FAQRelateToManyForCreateInput {
  create: [FAQCreateInput!]
  connect: [FAQWhereUniqueInput!]
}

input AmenityCardRelateToManyForCreateInput {
  create: [AmenityCardCreateInput!]
  connect: [AmenityCardWhereUniqueInput!]
}

input AmenityFilterRelateToManyForCreateInput {
  create: [AmenityFilterCreateInput!]
  connect: [AmenityFilterWhereUniqueInput!]
}

input UnitRelateToManyForCreateInput {
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input UnitFilterRelateToManyForCreateInput {
  create: [UnitFilterCreateInput!]
  connect: [UnitFilterWhereUniqueInput!]
}

input MaterialCardRelateToManyForCreateInput {
  create: [MaterialCardCreateInput!]
  connect: [MaterialCardWhereUniqueInput!]
}

type Agent {
  id: ID!
  name: String
  photo: FileFieldOutput
  project: Project
}

input AgentWhereUniqueInput {
  id: ID
}

input AgentWhereInput {
  AND: [AgentWhereInput!]
  OR: [AgentWhereInput!]
  NOT: [AgentWhereInput!]
  id: IDFilter
  name: StringFilter
  project: ProjectWhereInput
}

input AgentOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input AgentUpdateInput {
  name: String
  photo: FileFieldInput
  project: ProjectRelateToOneForUpdateInput
}

input ProjectRelateToOneForUpdateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
}

input AgentUpdateArgs {
  where: AgentWhereUniqueInput!
  data: AgentUpdateInput!
}

input AgentCreateInput {
  name: String
  photo: FileFieldInput
  project: ProjectRelateToOneForCreateInput
}

input ProjectRelateToOneForCreateInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

type GalleryImage {
  id: ID!
  image: FileFieldOutput
  project: Project
}

input GalleryImageWhereUniqueInput {
  id: ID
}

input GalleryImageWhereInput {
  AND: [GalleryImageWhereInput!]
  OR: [GalleryImageWhereInput!]
  NOT: [GalleryImageWhereInput!]
  id: IDFilter
  project: ProjectWhereInput
}

input GalleryImageOrderByInput {
  id: OrderDirection
}

input GalleryImageUpdateInput {
  image: FileFieldInput
  project: ProjectRelateToOneForUpdateInput
}

input GalleryImageUpdateArgs {
  where: GalleryImageWhereUniqueInput!
  data: GalleryImageUpdateInput!
}

input GalleryImageCreateInput {
  image: FileFieldInput
  project: ProjectRelateToOneForCreateInput
}

type FAQ {
  id: ID!
  question: String
  answer: String
  project: Project
}

input FAQWhereUniqueInput {
  id: ID
}

input FAQWhereInput {
  AND: [FAQWhereInput!]
  OR: [FAQWhereInput!]
  NOT: [FAQWhereInput!]
  id: IDFilter
  question: StringFilter
  answer: StringFilter
  project: ProjectWhereInput
}

input FAQOrderByInput {
  id: OrderDirection
  question: OrderDirection
  answer: OrderDirection
}

input FAQUpdateInput {
  question: String
  answer: String
  project: ProjectRelateToOneForUpdateInput
}

input FAQUpdateArgs {
  where: FAQWhereUniqueInput!
  data: FAQUpdateInput!
}

input FAQCreateInput {
  question: String
  answer: String
  project: ProjectRelateToOneForCreateInput
}

type AmenityCard {
  id: ID!
  title: String
  description: String
  image: FileFieldOutput
  categories: String
  project: Project
}

input AmenityCardWhereUniqueInput {
  id: ID
}

input AmenityCardWhereInput {
  AND: [AmenityCardWhereInput!]
  OR: [AmenityCardWhereInput!]
  NOT: [AmenityCardWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  categories: StringFilter
  project: ProjectWhereInput
}

input AmenityCardOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  categories: OrderDirection
}

input AmenityCardUpdateInput {
  title: String
  description: String
  image: FileFieldInput
  categories: String
  project: ProjectRelateToOneForUpdateInput
}

input AmenityCardUpdateArgs {
  where: AmenityCardWhereUniqueInput!
  data: AmenityCardUpdateInput!
}

input AmenityCardCreateInput {
  title: String
  description: String
  image: FileFieldInput
  categories: String
  project: ProjectRelateToOneForCreateInput
}

type AmenityFilter {
  id: ID!
  name: String
  project: Project
}

input AmenityFilterWhereUniqueInput {
  id: ID
}

input AmenityFilterWhereInput {
  AND: [AmenityFilterWhereInput!]
  OR: [AmenityFilterWhereInput!]
  NOT: [AmenityFilterWhereInput!]
  id: IDFilter
  name: StringFilter
  project: ProjectWhereInput
}

input AmenityFilterOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input AmenityFilterUpdateInput {
  name: String
  project: ProjectRelateToOneForUpdateInput
}

input AmenityFilterUpdateArgs {
  where: AmenityFilterWhereUniqueInput!
  data: AmenityFilterUpdateInput!
}

input AmenityFilterCreateInput {
  name: String
  project: ProjectRelateToOneForCreateInput
}

type Unit {
  id: ID!
  type: String
  title: String
  price: String
  image: FileFieldOutput
  tag: String
  cityView: Boolean
  sqft: String
  project: Project
}

input UnitWhereUniqueInput {
  id: ID
}

input UnitWhereInput {
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
  id: IDFilter
  type: StringFilter
  title: StringFilter
  price: StringFilter
  tag: StringFilter
  cityView: BooleanFilter
  sqft: StringFilter
  project: ProjectWhereInput
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UnitOrderByInput {
  id: OrderDirection
  type: OrderDirection
  title: OrderDirection
  price: OrderDirection
  tag: OrderDirection
  cityView: OrderDirection
  sqft: OrderDirection
}

input UnitUpdateInput {
  type: String
  title: String
  price: String
  image: FileFieldInput
  tag: String
  cityView: Boolean
  sqft: String
  project: ProjectRelateToOneForUpdateInput
}

input UnitUpdateArgs {
  where: UnitWhereUniqueInput!
  data: UnitUpdateInput!
}

input UnitCreateInput {
  type: String
  title: String
  price: String
  image: FileFieldInput
  tag: String
  cityView: Boolean
  sqft: String
  project: ProjectRelateToOneForCreateInput
}

type UnitFilter {
  id: ID!
  name: String
  project: Project
}

input UnitFilterWhereUniqueInput {
  id: ID
}

input UnitFilterWhereInput {
  AND: [UnitFilterWhereInput!]
  OR: [UnitFilterWhereInput!]
  NOT: [UnitFilterWhereInput!]
  id: IDFilter
  name: StringFilter
  project: ProjectWhereInput
}

input UnitFilterOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input UnitFilterUpdateInput {
  name: String
  project: ProjectRelateToOneForUpdateInput
}

input UnitFilterUpdateArgs {
  where: UnitFilterWhereUniqueInput!
  data: UnitFilterUpdateInput!
}

input UnitFilterCreateInput {
  name: String
  project: ProjectRelateToOneForCreateInput
}

type MaterialCard {
  id: ID!
  title: String
  description: String
  image: FileFieldOutput
  document: FileFieldOutput
  project: Project
}

input MaterialCardWhereUniqueInput {
  id: ID
}

input MaterialCardWhereInput {
  AND: [MaterialCardWhereInput!]
  OR: [MaterialCardWhereInput!]
  NOT: [MaterialCardWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  project: ProjectWhereInput
}

input MaterialCardOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input MaterialCardUpdateInput {
  title: String
  description: String
  image: FileFieldInput
  document: FileFieldInput
  project: ProjectRelateToOneForUpdateInput
}

input MaterialCardUpdateArgs {
  where: MaterialCardWhereUniqueInput!
  data: MaterialCardUpdateInput!
}

input MaterialCardCreateInput {
  title: String
  description: String
  image: FileFieldInput
  document: FileFieldInput
  project: ProjectRelateToOneForCreateInput
}

type SiteSetting {
  id: ID!
  logo: FileFieldOutput
  footerLogo: FileFieldOutput
  heroTwoLogo: FileFieldOutput
  footerSocialLinks(where: SocialLinkWhereInput! = {}, orderBy: [SocialLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SocialLinkWhereUniqueInput): [SocialLink!]
  footerSocialLinksCount(where: SocialLinkWhereInput! = {}): Int
  footerCopyright: String
}

input SiteSettingWhereUniqueInput {
  id: ID
}

input SiteSettingWhereInput {
  AND: [SiteSettingWhereInput!]
  OR: [SiteSettingWhereInput!]
  NOT: [SiteSettingWhereInput!]
  id: IDFilter
  footerSocialLinks: SocialLinkManyRelationFilter
  footerCopyright: StringFilter
}

input SocialLinkManyRelationFilter {
  every: SocialLinkWhereInput
  some: SocialLinkWhereInput
  none: SocialLinkWhereInput
}

input SiteSettingOrderByInput {
  id: OrderDirection
  footerCopyright: OrderDirection
}

input SiteSettingUpdateInput {
  logo: FileFieldInput
  footerLogo: FileFieldInput
  heroTwoLogo: FileFieldInput
  footerSocialLinks: SocialLinkRelateToManyForUpdateInput
  footerCopyright: String
}

input SocialLinkRelateToManyForUpdateInput {
  disconnect: [SocialLinkWhereUniqueInput!]
  set: [SocialLinkWhereUniqueInput!]
  create: [SocialLinkCreateInput!]
  connect: [SocialLinkWhereUniqueInput!]
}

input SiteSettingUpdateArgs {
  where: SiteSettingWhereUniqueInput!
  data: SiteSettingUpdateInput!
}

input SiteSettingCreateInput {
  logo: FileFieldInput
  footerLogo: FileFieldInput
  heroTwoLogo: FileFieldInput
  footerSocialLinks: SocialLinkRelateToManyForCreateInput
  footerCopyright: String
}

input SocialLinkRelateToManyForCreateInput {
  create: [SocialLinkCreateInput!]
  connect: [SocialLinkWhereUniqueInput!]
}

type SocialLink {
  id: ID!
  name: String
  icon: FileFieldOutput
  url: String
  siteSetting: SiteSetting
}

input SocialLinkWhereUniqueInput {
  id: ID
}

input SocialLinkWhereInput {
  AND: [SocialLinkWhereInput!]
  OR: [SocialLinkWhereInput!]
  NOT: [SocialLinkWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  siteSetting: SiteSettingWhereInput
}

input SocialLinkOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
}

input SocialLinkUpdateInput {
  name: String
  icon: FileFieldInput
  url: String
  siteSetting: SiteSettingRelateToOneForUpdateInput
}

input SiteSettingRelateToOneForUpdateInput {
  create: SiteSettingCreateInput
  connect: SiteSettingWhereUniqueInput
  disconnect: Boolean
}

input SocialLinkUpdateArgs {
  where: SocialLinkWhereUniqueInput!
  data: SocialLinkUpdateInput!
}

input SocialLinkCreateInput {
  name: String
  icon: FileFieldInput
  url: String
  siteSetting: SiteSettingRelateToOneForCreateInput
}

input SiteSettingRelateToOneForCreateInput {
  create: SiteSettingCreateInput
  connect: SiteSettingWhereUniqueInput
}

type CallbackRequest {
  id: ID!
  name: String
  email: String
  phone: String
  pageUrl: String
  ipAddress: String
  project: Project
}

input CallbackRequestWhereUniqueInput {
  id: ID
}

input CallbackRequestWhereInput {
  AND: [CallbackRequestWhereInput!]
  OR: [CallbackRequestWhereInput!]
  NOT: [CallbackRequestWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  phone: StringFilter
  pageUrl: StringFilter
  ipAddress: StringFilter
  project: ProjectWhereInput
}

input CallbackRequestOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  phone: OrderDirection
  pageUrl: OrderDirection
  ipAddress: OrderDirection
}

input CallbackRequestUpdateInput {
  name: String
  email: String
  phone: String
  pageUrl: String
  ipAddress: String
  project: ProjectRelateToOneForUpdateInput
}

input CallbackRequestUpdateArgs {
  where: CallbackRequestWhereUniqueInput!
  data: CallbackRequestUpdateInput!
}

input CallbackRequestCreateInput {
  name: String
  email: String
  phone: String
  pageUrl: String
  ipAddress: String
  project: ProjectRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createProject(data: ProjectCreateInput!): Project
  createProjects(data: [ProjectCreateInput!]!): [Project]
  updateProject(where: ProjectWhereUniqueInput!, data: ProjectUpdateInput!): Project
  updateProjects(data: [ProjectUpdateArgs!]!): [Project]
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteProjects(where: [ProjectWhereUniqueInput!]!): [Project]
  createAgent(data: AgentCreateInput!): Agent
  createAgents(data: [AgentCreateInput!]!): [Agent]
  updateAgent(where: AgentWhereUniqueInput!, data: AgentUpdateInput!): Agent
  updateAgents(data: [AgentUpdateArgs!]!): [Agent]
  deleteAgent(where: AgentWhereUniqueInput!): Agent
  deleteAgents(where: [AgentWhereUniqueInput!]!): [Agent]
  createGalleryImage(data: GalleryImageCreateInput!): GalleryImage
  createGalleryImages(data: [GalleryImageCreateInput!]!): [GalleryImage]
  updateGalleryImage(where: GalleryImageWhereUniqueInput!, data: GalleryImageUpdateInput!): GalleryImage
  updateGalleryImages(data: [GalleryImageUpdateArgs!]!): [GalleryImage]
  deleteGalleryImage(where: GalleryImageWhereUniqueInput!): GalleryImage
  deleteGalleryImages(where: [GalleryImageWhereUniqueInput!]!): [GalleryImage]
  createFAQ(data: FAQCreateInput!): FAQ
  createFAQS(data: [FAQCreateInput!]!): [FAQ]
  updateFAQ(where: FAQWhereUniqueInput!, data: FAQUpdateInput!): FAQ
  updateFAQS(data: [FAQUpdateArgs!]!): [FAQ]
  deleteFAQ(where: FAQWhereUniqueInput!): FAQ
  deleteFAQS(where: [FAQWhereUniqueInput!]!): [FAQ]
  createAmenityCard(data: AmenityCardCreateInput!): AmenityCard
  createAmenityCards(data: [AmenityCardCreateInput!]!): [AmenityCard]
  updateAmenityCard(where: AmenityCardWhereUniqueInput!, data: AmenityCardUpdateInput!): AmenityCard
  updateAmenityCards(data: [AmenityCardUpdateArgs!]!): [AmenityCard]
  deleteAmenityCard(where: AmenityCardWhereUniqueInput!): AmenityCard
  deleteAmenityCards(where: [AmenityCardWhereUniqueInput!]!): [AmenityCard]
  createAmenityFilter(data: AmenityFilterCreateInput!): AmenityFilter
  createAmenityFilters(data: [AmenityFilterCreateInput!]!): [AmenityFilter]
  updateAmenityFilter(where: AmenityFilterWhereUniqueInput!, data: AmenityFilterUpdateInput!): AmenityFilter
  updateAmenityFilters(data: [AmenityFilterUpdateArgs!]!): [AmenityFilter]
  deleteAmenityFilter(where: AmenityFilterWhereUniqueInput!): AmenityFilter
  deleteAmenityFilters(where: [AmenityFilterWhereUniqueInput!]!): [AmenityFilter]
  createUnit(data: UnitCreateInput!): Unit
  createUnits(data: [UnitCreateInput!]!): [Unit]
  updateUnit(where: UnitWhereUniqueInput!, data: UnitUpdateInput!): Unit
  updateUnits(data: [UnitUpdateArgs!]!): [Unit]
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteUnits(where: [UnitWhereUniqueInput!]!): [Unit]
  createUnitFilter(data: UnitFilterCreateInput!): UnitFilter
  createUnitFilters(data: [UnitFilterCreateInput!]!): [UnitFilter]
  updateUnitFilter(where: UnitFilterWhereUniqueInput!, data: UnitFilterUpdateInput!): UnitFilter
  updateUnitFilters(data: [UnitFilterUpdateArgs!]!): [UnitFilter]
  deleteUnitFilter(where: UnitFilterWhereUniqueInput!): UnitFilter
  deleteUnitFilters(where: [UnitFilterWhereUniqueInput!]!): [UnitFilter]
  createMaterialCard(data: MaterialCardCreateInput!): MaterialCard
  createMaterialCards(data: [MaterialCardCreateInput!]!): [MaterialCard]
  updateMaterialCard(where: MaterialCardWhereUniqueInput!, data: MaterialCardUpdateInput!): MaterialCard
  updateMaterialCards(data: [MaterialCardUpdateArgs!]!): [MaterialCard]
  deleteMaterialCard(where: MaterialCardWhereUniqueInput!): MaterialCard
  deleteMaterialCards(where: [MaterialCardWhereUniqueInput!]!): [MaterialCard]
  createSiteSetting(data: SiteSettingCreateInput!): SiteSetting
  createSiteSettings(data: [SiteSettingCreateInput!]!): [SiteSetting]
  updateSiteSetting(where: SiteSettingWhereUniqueInput!, data: SiteSettingUpdateInput!): SiteSetting
  updateSiteSettings(data: [SiteSettingUpdateArgs!]!): [SiteSetting]
  deleteSiteSetting(where: SiteSettingWhereUniqueInput!): SiteSetting
  deleteSiteSettings(where: [SiteSettingWhereUniqueInput!]!): [SiteSetting]
  createSocialLink(data: SocialLinkCreateInput!): SocialLink
  createSocialLinks(data: [SocialLinkCreateInput!]!): [SocialLink]
  updateSocialLink(where: SocialLinkWhereUniqueInput!, data: SocialLinkUpdateInput!): SocialLink
  updateSocialLinks(data: [SocialLinkUpdateArgs!]!): [SocialLink]
  deleteSocialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  deleteSocialLinks(where: [SocialLinkWhereUniqueInput!]!): [SocialLink]
  createCallbackRequest(data: CallbackRequestCreateInput!): CallbackRequest
  createCallbackRequests(data: [CallbackRequestCreateInput!]!): [CallbackRequest]
  updateCallbackRequest(where: CallbackRequestWhereUniqueInput!, data: CallbackRequestUpdateInput!): CallbackRequest
  updateCallbackRequests(data: [CallbackRequestUpdateArgs!]!): [CallbackRequest]
  deleteCallbackRequest(where: CallbackRequestWhereUniqueInput!): CallbackRequest
  deleteCallbackRequests(where: [CallbackRequestWhereUniqueInput!]!): [CallbackRequest]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  project(where: ProjectWhereUniqueInput!): Project
  projects(where: ProjectWhereInput! = {}, orderBy: [ProjectOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProjectWhereUniqueInput): [Project!]
  projectsCount(where: ProjectWhereInput! = {}): Int
  agent(where: AgentWhereUniqueInput!): Agent
  agents(where: AgentWhereInput! = {}, orderBy: [AgentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AgentWhereUniqueInput): [Agent!]
  agentsCount(where: AgentWhereInput! = {}): Int
  galleryImage(where: GalleryImageWhereUniqueInput!): GalleryImage
  galleryImages(where: GalleryImageWhereInput! = {}, orderBy: [GalleryImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: GalleryImageWhereUniqueInput): [GalleryImage!]
  galleryImagesCount(where: GalleryImageWhereInput! = {}): Int
  fAQ(where: FAQWhereUniqueInput!): FAQ
  fAQS(where: FAQWhereInput! = {}, orderBy: [FAQOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FAQWhereUniqueInput): [FAQ!]
  fAQSCount(where: FAQWhereInput! = {}): Int
  amenityCard(where: AmenityCardWhereUniqueInput!): AmenityCard
  amenityCards(where: AmenityCardWhereInput! = {}, orderBy: [AmenityCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AmenityCardWhereUniqueInput): [AmenityCard!]
  amenityCardsCount(where: AmenityCardWhereInput! = {}): Int
  amenityFilter(where: AmenityFilterWhereUniqueInput!): AmenityFilter
  amenityFilters(where: AmenityFilterWhereInput! = {}, orderBy: [AmenityFilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AmenityFilterWhereUniqueInput): [AmenityFilter!]
  amenityFiltersCount(where: AmenityFilterWhereInput! = {}): Int
  unit(where: UnitWhereUniqueInput!): Unit
  units(where: UnitWhereInput! = {}, orderBy: [UnitOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UnitWhereUniqueInput): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
  unitFilter(where: UnitFilterWhereUniqueInput!): UnitFilter
  unitFilters(where: UnitFilterWhereInput! = {}, orderBy: [UnitFilterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UnitFilterWhereUniqueInput): [UnitFilter!]
  unitFiltersCount(where: UnitFilterWhereInput! = {}): Int
  materialCard(where: MaterialCardWhereUniqueInput!): MaterialCard
  materialCards(where: MaterialCardWhereInput! = {}, orderBy: [MaterialCardOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialCardWhereUniqueInput): [MaterialCard!]
  materialCardsCount(where: MaterialCardWhereInput! = {}): Int
  siteSetting(where: SiteSettingWhereUniqueInput!): SiteSetting
  siteSettings(where: SiteSettingWhereInput! = {}, orderBy: [SiteSettingOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SiteSettingWhereUniqueInput): [SiteSetting!]
  siteSettingsCount(where: SiteSettingWhereInput! = {}): Int
  socialLink(where: SocialLinkWhereUniqueInput!): SocialLink
  socialLinks(where: SocialLinkWhereInput! = {}, orderBy: [SocialLinkOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SocialLinkWhereUniqueInput): [SocialLink!]
  socialLinksCount(where: SocialLinkWhereInput! = {}): Int
  callbackRequest(where: CallbackRequestWhereUniqueInput!): CallbackRequest
  callbackRequests(where: CallbackRequestWhereInput! = {}, orderBy: [CallbackRequestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CallbackRequestWhereUniqueInput): [CallbackRequest!]
  callbackRequestsCount(where: CallbackRequestWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
